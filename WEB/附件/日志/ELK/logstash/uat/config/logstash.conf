input {
   kafka {
        bootstrap_servers => ["${kafkaUrl}"]
        group_id => "all_message_consumer_1"
        topics => ["all_message"]
        consumer_threads => 10
        client_id => "logstash-0-all_message_1"
        type => "allMessages"
    }
   kafka {
        bootstrap_servers => ["${kafkaUrl}"]
        group_id => "cdrReports_consumer"
        topics => ["logCdrStandard"]
        consumer_threads => 5
        client_id => "logstash-0-logCdrStandard"
        type => "cdrReports"
    }
    kafka {
        bootstrap_servers => ["${kafkaUrl}"]
        group_id => "slowExecWord_consumer"
        topics => ["slowExecWord"]
        consumer_threads => 2
        client_id => "logstash-0-slowExecWord"
        type => "slowExecWord"
    }
}

filter{
 if [type] == "allMessages" {
    json {
        source => "message"
    }
    mutate {
        remove_field =>["@version"]
        remove_field =>["@timestamp"]
        remove_field =>["message"]
        remove_field =>["id"]
        remove_field =>["origin"]
        remove_field =>["ip"]
        remove_field =>["userId"]
        remove_field =>["userName"]
        remove_field =>["label"]
        remove_field =>["loginName"]
        remove_field =>["sessionId"]
        remove_field =>["method"]
        remove_field =>["arguments"]
        remove_field =>["stackTrace"]
        remove_field =>["processTime"]
        remove_field =>["status"]
        remove_field =>["createAt"]
        remove_field =>["msgId"]
        remove_field =>["type"]
        add_field => { "[@metadata][type]" => "allMessages" }
        add_field => { "[@metadata][operation]" => "gateWayLog" }
        remove_field =>["allMessages"]
    }
 }
 if [type] == "cdrReports" {
    json {
        source => "message"
    }
    mutate {
        remove_field =>["@version"]
        remove_field =>["@timestamp"]
        remove_field =>["message"]
        remove_field =>["id"]
        remove_field =>["origin"]
        remove_field =>["ip"]
        remove_field =>["userId"]
        remove_field =>["userName"]
        remove_field =>["label"]
        remove_field =>["loginName"]
        remove_field =>["sessionId"]
        remove_field =>["method"]
        remove_field =>["arguments"]
        remove_field =>["stackTrace"]
        remove_field =>["processTime"]
        remove_field =>["status"]
        remove_field =>["createAt"]
        remove_field =>["msgId"]
        remove_field =>["type"]
        add_field => { "[@metadata][type]" => "cdrReports" }
    }
    json {
        source => "cycleMessage"
    }
    mutate {
        remove_field =>["cycleMessage"]
    }
 }   
 if [type] == "slowExecWord" {
    json {
        source => "message"
    } 
    mutate {
        remove_field =>["@version"]
        remove_field =>["@timestamp"]
        remove_field =>["input"]
        remove_field =>["beat"]
        remove_field =>["offset"]
        remove_field =>["prospector"]
        remove_field =>["log"]
        remove_field =>["host"]
        remove_field =>["source"]
        remove_field =>["message"]
        add_field => { "[@metadata][type]" => "slowExecWord" }
    }
  }
}

output {
  if ([@metadata][type] == "allMessages") or ([@metadata][operation] == "gateWayLog") {
    #stdout { codec => rubydebug }
    if [uuid] not in ["","drop"] {
      elasticsearch {
        hosts => ["${esUrl}"]
        user => "${esUser}"
        password => "${esPassword}"
        action => "update"
        index => "all_message"
        document_id => "%{uuid}"
        codec => "json"
        doc_as_upsert => true
      }
    }
   }
 if [@metadata][type] == "cdrReports" {
        if [uuid] not in ["","null"] {
            elasticsearch {
                hosts => ["${esUrl}"]
                user => "${esUser}"
                password => "${esPassword}"
                action => "update"
                index => "all_message"
                document_id => "%{uuid}"
                doc_as_upsert => true
            }
        }
    }
 if [@metadata][type] == "slowExecWord" {
        jdbc {
            driver_jar_path => '${driverJarPath}'    
            connection_string => "${oracleUrl}"
            username => "${oracleUserName}"
            password => "${oraclePassword}"    
            statement => ["insert into T_STANDARD_ENG_INEFFICIRNT_SQL (MANUFACTURE_ID, MANUFACTURE_NAME, ACTION, PRIMARY_KEY, SQL, DB_TYPE, USE_TIME, CREATE_TIME) VALUES(?,?,?,?,?,?,?,?) ","manufactureId","manufactureName","action","primaryKey","sql","dbType","useTime","createTime"]
        }
    }
}
